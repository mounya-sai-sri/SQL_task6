-- Ensure previous tables exist
-- (Run this part only if tables are not already present)
DROP TABLE IF EXISTS Orders;
DROP TABLE IF EXISTS Customers;

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    city VARCHAR(50)
);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

INSERT INTO Customers (customer_id, name, city) VALUES
(1, 'Alice', 'New York'),
(2, 'Bob', 'Chicago'),
(3, 'Charlie', 'Los Angeles'),
(4, 'David', 'Houston');

INSERT INTO Orders (order_id, customer_id, order_date, amount) VALUES
(101, 1, '2024-06-01', 250.00),
(102, 1, '2024-06-05', 180.00),
(103, 2, '2024-06-10', 340.00),
(104, 5, '2024-06-15', 90.00);  -- Order with invalid customer_id

-- 1. Scalar Subquery: Show customers and the total number of customers (as a scalar)
SELECT 
    name,
    (SELECT COUNT(*) FROM Customers) AS total_customers
FROM Customers;

-- 2. Correlated Subquery: Show customers and their total order amount
SELECT 
    c.name,
    (SELECT SUM(o.amount) FROM Orders o WHERE o.customer_id = c.customer_id) AS total_order_amount
FROM Customers c;

-- 3. Subquery with IN: Customers who have placed orders
SELECT name
FROM Customers
WHERE customer_id IN (SELECT customer_id FROM Orders);

-- 4. Subquery with EXISTS: Customers who have orders
SELECT c.name
FROM Customers c
WHERE EXISTS (
    SELECT 1 FROM Orders o WHERE o.customer_id = c.customer_id
);

-- 5. Subquery with = (scalar): Customers whose total order amount is equal to 430
SELECT name
FROM Customers
WHERE (
    SELECT SUM(amount)
    FROM Orders
    WHERE Orders.customer_id = Customers.customer_id
) = 430;  -- Alice has two orders: 250 + 180 = 430
